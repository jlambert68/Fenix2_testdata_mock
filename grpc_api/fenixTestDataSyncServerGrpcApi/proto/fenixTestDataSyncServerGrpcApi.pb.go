// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: fenixTestDataSyncServerGrpcApi.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Used to have client and server in sync with using the same proto file version
// Minor changes is backwards compatible with previous version
// Major changes changes needs to be the same for server and client
type CurrentTestDataProtoFileVersionEnum int32

const (
	// Deprecated: Do not use.
	CurrentTestDataProtoFileVersionEnum_VERSION_0_9 CurrentTestDataProtoFileVersionEnum = 0
	CurrentTestDataProtoFileVersionEnum_VERSION_1_0 CurrentTestDataProtoFileVersionEnum = 1 // Current version
)

// Enum value maps for CurrentTestDataProtoFileVersionEnum.
var (
	CurrentTestDataProtoFileVersionEnum_name = map[int32]string{
		0: "VERSION_0_9",
		1: "VERSION_1_0",
	}
	CurrentTestDataProtoFileVersionEnum_value = map[string]int32{
		"VERSION_0_9": 0,
		"VERSION_1_0": 1,
	}
)

func (x CurrentTestDataProtoFileVersionEnum) Enum() *CurrentTestDataProtoFileVersionEnum {
	p := new(CurrentTestDataProtoFileVersionEnum)
	*p = x
	return p
}

func (x CurrentTestDataProtoFileVersionEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrentTestDataProtoFileVersionEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_fenixTestDataSyncServerGrpcApi_proto_enumTypes[0].Descriptor()
}

func (CurrentTestDataProtoFileVersionEnum) Type() protoreflect.EnumType {
	return &file_fenixTestDataSyncServerGrpcApi_proto_enumTypes[0]
}

func (x CurrentTestDataProtoFileVersionEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrentTestDataProtoFileVersionEnum.Descriptor instead.
func (CurrentTestDataProtoFileVersionEnum) EnumDescriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{0}
}

// How TestData filter can be selected
type HeaderSelectionTypeEnum int32

const (
	HeaderSelectionTypeEnum_HEADER_IS_SINGLE_SELECT HeaderSelectionTypeEnum = 0
	HeaderSelectionTypeEnum_HEADER_IS_MULTI_SELECT  HeaderSelectionTypeEnum = 1
)

// Enum value maps for HeaderSelectionTypeEnum.
var (
	HeaderSelectionTypeEnum_name = map[int32]string{
		0: "HEADER_IS_SINGLE_SELECT",
		1: "HEADER_IS_MULTI_SELECT",
	}
	HeaderSelectionTypeEnum_value = map[string]int32{
		"HEADER_IS_SINGLE_SELECT": 0,
		"HEADER_IS_MULTI_SELECT":  1,
	}
)

func (x HeaderSelectionTypeEnum) Enum() *HeaderSelectionTypeEnum {
	p := new(HeaderSelectionTypeEnum)
	*p = x
	return p
}

func (x HeaderSelectionTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeaderSelectionTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_fenixTestDataSyncServerGrpcApi_proto_enumTypes[1].Descriptor()
}

func (HeaderSelectionTypeEnum) Type() protoreflect.EnumType {
	return &file_fenixTestDataSyncServerGrpcApi_proto_enumTypes[1]
}

func (x HeaderSelectionTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeaderSelectionTypeEnum.Descriptor instead.
func (HeaderSelectionTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{1}
}

// Parameter used for Empty inputs
type EmptyParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyParameter) Reset() {
	*x = EmptyParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyParameter) ProtoMessage() {}

func (x *EmptyParameter) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyParameter.ProtoReflect.Descriptor instead.
func (*EmptyParameter) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{0}
}

// Ack/Nack- Response message with comment
type AckNackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acknack  bool   `protobuf:"varint,1,opt,name=acknack,proto3" json:"acknack,omitempty"`  // True=Ack, False=Nack
	Comments string `protobuf:"bytes,2,opt,name=comments,proto3" json:"comments,omitempty"` //Comments if needed
}

func (x *AckNackResponse) Reset() {
	*x = AckNackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckNackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckNackResponse) ProtoMessage() {}

func (x *AckNackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckNackResponse.ProtoReflect.Descriptor instead.
func (*AckNackResponse) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{1}
}

func (x *AckNackResponse) GetAcknack() bool {
	if x != nil {
		return x.Acknack
	}
	return false
}

func (x *AckNackResponse) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

// Message Holding information about the TestDataClient
type TestDataClientInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataClientGuid           string                              `protobuf:"bytes,1,opt,name=TestDataClientGuid,proto3" json:"TestDataClientGuid,omitempty"`
	TestDomainGuid               string                              `protobuf:"bytes,2,opt,name=TestDomainGuid,proto3" json:"TestDomainGuid,omitempty"`
	TestDomainName               string                              `protobuf:"bytes,3,opt,name=TestDomainName,proto3" json:"TestDomainName,omitempty"`
	TestDataClientIpAddress      string                              `protobuf:"bytes,4,opt,name=TestDataClientIpAddress,proto3" json:"TestDataClientIpAddress,omitempty"`
	TestDataClientPort           string                              `protobuf:"bytes,5,opt,name=TestDataClientPort,proto3" json:"TestDataClientPort,omitempty"`
	ProtoFileVersionUsedByCLient CurrentTestDataProtoFileVersionEnum `protobuf:"varint,6,opt,name=ProtoFileVersionUsedByCLient,proto3,enum=fenixTestDataSyncServerGrpcApi.CurrentTestDataProtoFileVersionEnum" json:"ProtoFileVersionUsedByCLient,omitempty"`
}

func (x *TestDataClientInformationMessage) Reset() {
	*x = TestDataClientInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDataClientInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDataClientInformationMessage) ProtoMessage() {}

func (x *TestDataClientInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDataClientInformationMessage.ProtoReflect.Descriptor instead.
func (*TestDataClientInformationMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{2}
}

func (x *TestDataClientInformationMessage) GetTestDataClientGuid() string {
	if x != nil {
		return x.TestDataClientGuid
	}
	return ""
}

func (x *TestDataClientInformationMessage) GetTestDomainGuid() string {
	if x != nil {
		return x.TestDomainGuid
	}
	return ""
}

func (x *TestDataClientInformationMessage) GetTestDomainName() string {
	if x != nil {
		return x.TestDomainName
	}
	return ""
}

func (x *TestDataClientInformationMessage) GetTestDataClientIpAddress() string {
	if x != nil {
		return x.TestDataClientIpAddress
	}
	return ""
}

func (x *TestDataClientInformationMessage) GetTestDataClientPort() string {
	if x != nil {
		return x.TestDataClientPort
	}
	return ""
}

func (x *TestDataClientInformationMessage) GetProtoFileVersionUsedByCLient() CurrentTestDataProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByCLient
	}
	return CurrentTestDataProtoFileVersionEnum_VERSION_0_9
}

// Message holding the top MerkleTree hash
type MerkleHashMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataClientGuid string `protobuf:"bytes,1,opt,name=TestDataClientGuid,proto3" json:"TestDataClientGuid,omitempty"`
	MerkleHash         string `protobuf:"bytes,2,opt,name=MerkleHash,proto3" json:"MerkleHash,omitempty"`
}

func (x *MerkleHashMessage) Reset() {
	*x = MerkleHashMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerkleHashMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleHashMessage) ProtoMessage() {}

func (x *MerkleHashMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleHashMessage.ProtoReflect.Descriptor instead.
func (*MerkleHashMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{3}
}

func (x *MerkleHashMessage) GetTestDataClientGuid() string {
	if x != nil {
		return x.TestDataClientGuid
	}
	return ""
}

func (x *MerkleHashMessage) GetMerkleHash() string {
	if x != nil {
		return x.MerkleHash
	}
	return ""
}

// Message holding the complete MerkleTree for the hashes
type MerkleTreeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataClientGuid string                   `protobuf:"bytes,1,opt,name=TestDataClientGuid,proto3" json:"TestDataClientGuid,omitempty"`
	MerkleTreeNodes    []*MerkleTreeNodeMessage `protobuf:"bytes,2,rep,name=MerkleTreeNodes,proto3" json:"MerkleTreeNodes,omitempty"`
}

func (x *MerkleTreeMessage) Reset() {
	*x = MerkleTreeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerkleTreeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleTreeMessage) ProtoMessage() {}

func (x *MerkleTreeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleTreeMessage.ProtoReflect.Descriptor instead.
func (*MerkleTreeMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{4}
}

func (x *MerkleTreeMessage) GetTestDataClientGuid() string {
	if x != nil {
		return x.TestDataClientGuid
	}
	return ""
}

func (x *MerkleTreeMessage) GetMerkleTreeNodes() []*MerkleTreeNodeMessage {
	if x != nil {
		return x.MerkleTreeNodes
	}
	return nil
}

// Message holding one node of the MerkleTree
type MerkleTreeNodeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerkleLevel     int64  `protobuf:"varint,1,opt,name=MerkleLevel,proto3" json:"MerkleLevel,omitempty"`
	MerklePath      string `protobuf:"bytes,2,opt,name=MerklePath,proto3" json:"MerklePath,omitempty"`
	MerkleHash      string `protobuf:"bytes,3,opt,name=MerkleHash,proto3" json:"MerkleHash,omitempty"`
	MerkleChildHash string `protobuf:"bytes,4,opt,name=MerkleChildHash,proto3" json:"MerkleChildHash,omitempty"`
}

func (x *MerkleTreeNodeMessage) Reset() {
	*x = MerkleTreeNodeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerkleTreeNodeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleTreeNodeMessage) ProtoMessage() {}

func (x *MerkleTreeNodeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleTreeNodeMessage.ProtoReflect.Descriptor instead.
func (*MerkleTreeNodeMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{5}
}

func (x *MerkleTreeNodeMessage) GetMerkleLevel() int64 {
	if x != nil {
		return x.MerkleLevel
	}
	return 0
}

func (x *MerkleTreeNodeMessage) GetMerklePath() string {
	if x != nil {
		return x.MerklePath
	}
	return ""
}

func (x *MerkleTreeNodeMessage) GetMerkleHash() string {
	if x != nil {
		return x.MerkleHash
	}
	return ""
}

func (x *MerkleTreeNodeMessage) GetMerkleChildHash() string {
	if x != nil {
		return x.MerkleChildHash
	}
	return ""
}

// Message holding all headers for the testdata
type TestDataHeaderMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataClientGuid  string                       `protobuf:"bytes,1,opt,name=TestDataClientGuid,proto3" json:"TestDataClientGuid,omitempty"`
	HeadersHash         string                       `protobuf:"bytes,2,opt,name=HeadersHash,proto3" json:"HeadersHash,omitempty"`
	TestDataHeaderItems []*TestDataHeaderItemMessage `protobuf:"bytes,3,rep,name=TestDataHeaderItems,proto3" json:"TestDataHeaderItems,omitempty"`
}

func (x *TestDataHeaderMessage) Reset() {
	*x = TestDataHeaderMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDataHeaderMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDataHeaderMessage) ProtoMessage() {}

func (x *TestDataHeaderMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDataHeaderMessage.ProtoReflect.Descriptor instead.
func (*TestDataHeaderMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{6}
}

func (x *TestDataHeaderMessage) GetTestDataClientGuid() string {
	if x != nil {
		return x.TestDataClientGuid
	}
	return ""
}

func (x *TestDataHeaderMessage) GetHeadersHash() string {
	if x != nil {
		return x.HeadersHash
	}
	return ""
}

func (x *TestDataHeaderMessage) GetTestDataHeaderItems() []*TestDataHeaderItemMessage {
	if x != nil {
		return x.TestDataHeaderItems
	}
	return nil
}

// Message holding one Header Item
type TestDataHeaderItemMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeaderPresentationsLabel     string                  `protobuf:"bytes,1,opt,name=HeaderPresentationsLabel,proto3" json:"HeaderPresentationsLabel,omitempty"`
	HeaderShouldbBeUsedForFilter bool                    `protobuf:"varint,2,opt,name=HeaderShouldbBeUsedForFilter,proto3" json:"HeaderShouldbBeUsedForFilter,omitempty"`
	HeaderIsMandatoryInFilter    bool                    `protobuf:"varint,3,opt,name=HeaderIsMandatoryInFilter,proto3" json:"HeaderIsMandatoryInFilter,omitempty"`
	HeaderSelectionType          HeaderSelectionTypeEnum `protobuf:"varint,4,opt,name=HeaderSelectionType,proto3,enum=fenixTestDataSyncServerGrpcApi.HeaderSelectionTypeEnum" json:"HeaderSelectionType,omitempty"`
	HeaderFilterValue            []*HeaderFilterValues   `protobuf:"bytes,5,rep,name=HeaderFilterValue,proto3" json:"HeaderFilterValue,omitempty"`
}

func (x *TestDataHeaderItemMessage) Reset() {
	*x = TestDataHeaderItemMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDataHeaderItemMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDataHeaderItemMessage) ProtoMessage() {}

func (x *TestDataHeaderItemMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDataHeaderItemMessage.ProtoReflect.Descriptor instead.
func (*TestDataHeaderItemMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{7}
}

func (x *TestDataHeaderItemMessage) GetHeaderPresentationsLabel() string {
	if x != nil {
		return x.HeaderPresentationsLabel
	}
	return ""
}

func (x *TestDataHeaderItemMessage) GetHeaderShouldbBeUsedForFilter() bool {
	if x != nil {
		return x.HeaderShouldbBeUsedForFilter
	}
	return false
}

func (x *TestDataHeaderItemMessage) GetHeaderIsMandatoryInFilter() bool {
	if x != nil {
		return x.HeaderIsMandatoryInFilter
	}
	return false
}

func (x *TestDataHeaderItemMessage) GetHeaderSelectionType() HeaderSelectionTypeEnum {
	if x != nil {
		return x.HeaderSelectionType
	}
	return HeaderSelectionTypeEnum_HEADER_IS_SINGLE_SELECT
}

func (x *TestDataHeaderItemMessage) GetHeaderFilterValue() []*HeaderFilterValues {
	if x != nil {
		return x.HeaderFilterValue
	}
	return nil
}

// One Filter value
type HeaderFilterValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeaderFilterValuesAsString string `protobuf:"bytes,1,opt,name=HeaderFilterValuesAsString,proto3" json:"HeaderFilterValuesAsString,omitempty"`
}

func (x *HeaderFilterValues) Reset() {
	*x = HeaderFilterValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderFilterValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderFilterValues) ProtoMessage() {}

func (x *HeaderFilterValues) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderFilterValues.ProtoReflect.Descriptor instead.
func (*HeaderFilterValues) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{8}
}

func (x *HeaderFilterValues) GetHeaderFilterValuesAsString() string {
	if x != nil {
		return x.HeaderFilterValuesAsString
	}
	return ""
}

// Message holding rows with TestData
type TestdataRowsMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataClientGuid string                `protobuf:"bytes,1,opt,name=TestDataClientGuid,proto3" json:"TestDataClientGuid,omitempty"`
	TestDataRows       []*TestDataRowMessage `protobuf:"bytes,2,rep,name=TestDataRows,proto3" json:"TestDataRows,omitempty"`
}

func (x *TestdataRowsMessages) Reset() {
	*x = TestdataRowsMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestdataRowsMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestdataRowsMessages) ProtoMessage() {}

func (x *TestdataRowsMessages) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestdataRowsMessages.ProtoReflect.Descriptor instead.
func (*TestdataRowsMessages) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{9}
}

func (x *TestdataRowsMessages) GetTestDataClientGuid() string {
	if x != nil {
		return x.TestDataClientGuid
	}
	return ""
}

func (x *TestdataRowsMessages) GetTestDataRows() []*TestDataRowMessage {
	if x != nil {
		return x.TestDataRows
	}
	return nil
}

// Message Holding one TestData row
type TestDataRowMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowHash       string                 `protobuf:"bytes,1,opt,name=RowHash,proto3" json:"RowHash,omitempty"`
	TestDataItems []*TestDataItemMessage `protobuf:"bytes,2,rep,name=TestDataItems,proto3" json:"TestDataItems,omitempty"`
}

func (x *TestDataRowMessage) Reset() {
	*x = TestDataRowMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDataRowMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDataRowMessage) ProtoMessage() {}

func (x *TestDataRowMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDataRowMessage.ProtoReflect.Descriptor instead.
func (*TestDataRowMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{10}
}

func (x *TestDataRowMessage) GetRowHash() string {
	if x != nil {
		return x.RowHash
	}
	return ""
}

func (x *TestDataRowMessage) GetTestDataItems() []*TestDataItemMessage {
	if x != nil {
		return x.TestDataItems
	}
	return nil
}

// Message holding one TestData item
type TestDataItemMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataItemValueAsString string `protobuf:"bytes,2,opt,name=TestDataItemValueAsString,proto3" json:"TestDataItemValueAsString,omitempty"`
}

func (x *TestDataItemMessage) Reset() {
	*x = TestDataItemMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDataItemMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDataItemMessage) ProtoMessage() {}

func (x *TestDataItemMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDataItemMessage.ProtoReflect.Descriptor instead.
func (*TestDataItemMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{11}
}

func (x *TestDataItemMessage) GetTestDataItemValueAsString() string {
	if x != nil {
		return x.TestDataItemValueAsString
	}
	return ""
}

var File_fenixTestDataSyncServerGrpcApi_proto protoreflect.FileDescriptor

var file_fenixTestDataSyncServerGrpcApi_proto_rawDesc = []byte{
	0x0a, 0x24, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x22, 0x10, 0x0a, 0x0e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x47, 0x0a, 0x0f, 0x41, 0x63, 0x6b, 0x4e,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x63, 0x6b, 0x6e, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x63,
	0x6b, 0x6e, 0x61, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x96, 0x03, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x47, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x54, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x2e, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x54, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x87, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x4c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x65, 0x64, 0x42, 0x79, 0x43, 0x4c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x63, 0x0a, 0x11, 0x4d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x47, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22,
	0xa4, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x47, 0x75, 0x69, 0x64, 0x12, 0x5f, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x15, 0x4d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x48, 0x61, 0x73, 0x68, 0x22, 0xd6, 0x01, 0x0a,
	0x15, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x47, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x6b, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa6, 0x03, 0x0a, 0x19, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x42, 0x0a, 0x1c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x62,
	0x42, 0x65, 0x55, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x62, 0x42, 0x65, 0x55, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x19, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x73, 0x4d,
	0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x73,
	0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x69, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x13, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x11,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x11, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x54,
	0x0a, 0x12, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x41, 0x73, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x9e, 0x01, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x6f, 0x77, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x64, 0x12, 0x56, 0x0a,
	0x0c, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x6f, 0x77, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x6f, 0x77, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52,
	0x6f, 0x77, 0x48, 0x61, 0x73, 0x68, 0x12, 0x59, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x53, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x73, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x73,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2a, 0x4b, 0x0a, 0x23, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x13, 0x0a,
	0x0b, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x30, 0x5f, 0x39, 0x10, 0x00, 0x1a, 0x02,
	0x08, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x31, 0x5f,
	0x30, 0x10, 0x01, 0x2a, 0x52, 0x0a, 0x17, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1b,
	0x0a, 0x17, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x53, 0x5f, 0x53, 0x49, 0x4e, 0x47,
	0x4c, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x48,
	0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x53, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x53,
	0x45, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x01, 0x32, 0x8b, 0x06, 0x0a, 0x19, 0x46, 0x65, 0x6e, 0x69,
	0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x0b, 0x41, 0x72, 0x65, 0x59, 0x6f, 0x75, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x1a, 0x2f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x40, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x2f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x31, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x2f, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63,
	0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x76, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x12, 0x31, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x2f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x35,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x2f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x34, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x1a, 0x2f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fenixTestDataSyncServerGrpcApi_proto_rawDescOnce sync.Once
	file_fenixTestDataSyncServerGrpcApi_proto_rawDescData = file_fenixTestDataSyncServerGrpcApi_proto_rawDesc
)

func file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP() []byte {
	file_fenixTestDataSyncServerGrpcApi_proto_rawDescOnce.Do(func() {
		file_fenixTestDataSyncServerGrpcApi_proto_rawDescData = protoimpl.X.CompressGZIP(file_fenixTestDataSyncServerGrpcApi_proto_rawDescData)
	})
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescData
}

var file_fenixTestDataSyncServerGrpcApi_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_fenixTestDataSyncServerGrpcApi_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_fenixTestDataSyncServerGrpcApi_proto_goTypes = []interface{}{
	(CurrentTestDataProtoFileVersionEnum)(0), // 0: fenixTestDataSyncServerGrpcApi.CurrentTestDataProtoFileVersionEnum
	(HeaderSelectionTypeEnum)(0),             // 1: fenixTestDataSyncServerGrpcApi.HeaderSelectionTypeEnum
	(*EmptyParameter)(nil),                   // 2: fenixTestDataSyncServerGrpcApi.EmptyParameter
	(*AckNackResponse)(nil),                  // 3: fenixTestDataSyncServerGrpcApi.AckNackResponse
	(*TestDataClientInformationMessage)(nil), // 4: fenixTestDataSyncServerGrpcApi.TestDataClientInformationMessage
	(*MerkleHashMessage)(nil),                // 5: fenixTestDataSyncServerGrpcApi.MerkleHashMessage
	(*MerkleTreeMessage)(nil),                // 6: fenixTestDataSyncServerGrpcApi.MerkleTreeMessage
	(*MerkleTreeNodeMessage)(nil),            // 7: fenixTestDataSyncServerGrpcApi.MerkleTreeNodeMessage
	(*TestDataHeaderMessage)(nil),            // 8: fenixTestDataSyncServerGrpcApi.TestDataHeaderMessage
	(*TestDataHeaderItemMessage)(nil),        // 9: fenixTestDataSyncServerGrpcApi.TestDataHeaderItemMessage
	(*HeaderFilterValues)(nil),               // 10: fenixTestDataSyncServerGrpcApi.HeaderFilterValues
	(*TestdataRowsMessages)(nil),             // 11: fenixTestDataSyncServerGrpcApi.TestdataRowsMessages
	(*TestDataRowMessage)(nil),               // 12: fenixTestDataSyncServerGrpcApi.TestDataRowMessage
	(*TestDataItemMessage)(nil),              // 13: fenixTestDataSyncServerGrpcApi.TestDataItemMessage
}
var file_fenixTestDataSyncServerGrpcApi_proto_depIdxs = []int32{
	0,  // 0: fenixTestDataSyncServerGrpcApi.TestDataClientInformationMessage.ProtoFileVersionUsedByCLient:type_name -> fenixTestDataSyncServerGrpcApi.CurrentTestDataProtoFileVersionEnum
	7,  // 1: fenixTestDataSyncServerGrpcApi.MerkleTreeMessage.MerkleTreeNodes:type_name -> fenixTestDataSyncServerGrpcApi.MerkleTreeNodeMessage
	9,  // 2: fenixTestDataSyncServerGrpcApi.TestDataHeaderMessage.TestDataHeaderItems:type_name -> fenixTestDataSyncServerGrpcApi.TestDataHeaderItemMessage
	1,  // 3: fenixTestDataSyncServerGrpcApi.TestDataHeaderItemMessage.HeaderSelectionType:type_name -> fenixTestDataSyncServerGrpcApi.HeaderSelectionTypeEnum
	10, // 4: fenixTestDataSyncServerGrpcApi.TestDataHeaderItemMessage.HeaderFilterValue:type_name -> fenixTestDataSyncServerGrpcApi.HeaderFilterValues
	12, // 5: fenixTestDataSyncServerGrpcApi.TestdataRowsMessages.TestDataRows:type_name -> fenixTestDataSyncServerGrpcApi.TestDataRowMessage
	13, // 6: fenixTestDataSyncServerGrpcApi.TestDataRowMessage.TestDataItems:type_name -> fenixTestDataSyncServerGrpcApi.TestDataItemMessage
	2,  // 7: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.AreYouAlive:input_type -> fenixTestDataSyncServerGrpcApi.EmptyParameter
	4,  // 8: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.RegisterTestDataClient:input_type -> fenixTestDataSyncServerGrpcApi.TestDataClientInformationMessage
	5,  // 9: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.SendMerkleHash:input_type -> fenixTestDataSyncServerGrpcApi.MerkleHashMessage
	6,  // 10: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.SendMerkleTree:input_type -> fenixTestDataSyncServerGrpcApi.MerkleTreeMessage
	8,  // 11: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.SendTestDataHeaders:input_type -> fenixTestDataSyncServerGrpcApi.TestDataHeaderMessage
	11, // 12: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.SendTestDataRows:input_type -> fenixTestDataSyncServerGrpcApi.TestdataRowsMessages
	3,  // 13: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.AreYouAlive:output_type -> fenixTestDataSyncServerGrpcApi.AckNackResponse
	3,  // 14: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.RegisterTestDataClient:output_type -> fenixTestDataSyncServerGrpcApi.AckNackResponse
	3,  // 15: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.SendMerkleHash:output_type -> fenixTestDataSyncServerGrpcApi.AckNackResponse
	3,  // 16: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.SendMerkleTree:output_type -> fenixTestDataSyncServerGrpcApi.AckNackResponse
	3,  // 17: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.SendTestDataHeaders:output_type -> fenixTestDataSyncServerGrpcApi.AckNackResponse
	3,  // 18: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.SendTestDataRows:output_type -> fenixTestDataSyncServerGrpcApi.AckNackResponse
	13, // [13:19] is the sub-list for method output_type
	7,  // [7:13] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_fenixTestDataSyncServerGrpcApi_proto_init() }
func file_fenixTestDataSyncServerGrpcApi_proto_init() {
	if File_fenixTestDataSyncServerGrpcApi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckNackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDataClientInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerkleHashMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerkleTreeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerkleTreeNodeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDataHeaderMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDataHeaderItemMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderFilterValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestdataRowsMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDataRowMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDataItemMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fenixTestDataSyncServerGrpcApi_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fenixTestDataSyncServerGrpcApi_proto_goTypes,
		DependencyIndexes: file_fenixTestDataSyncServerGrpcApi_proto_depIdxs,
		EnumInfos:         file_fenixTestDataSyncServerGrpcApi_proto_enumTypes,
		MessageInfos:      file_fenixTestDataSyncServerGrpcApi_proto_msgTypes,
	}.Build()
	File_fenixTestDataSyncServerGrpcApi_proto = out.File
	file_fenixTestDataSyncServerGrpcApi_proto_rawDesc = nil
	file_fenixTestDataSyncServerGrpcApi_proto_goTypes = nil
	file_fenixTestDataSyncServerGrpcApi_proto_depIdxs = nil
}

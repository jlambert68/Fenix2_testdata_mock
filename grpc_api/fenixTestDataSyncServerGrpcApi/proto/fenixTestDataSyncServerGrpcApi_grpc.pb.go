// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestInstructionBackendGrpcServicesClient is the client API for TestInstructionBackendGrpcServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestInstructionBackendGrpcServicesClient interface {
	//Fenix client can check if Fenix Testdata sync server is alive with this service
	AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Fenix client can register itself with the Fenix Testdata sync server
	RegisterTestDataClient(ctx context.Context, in *TestDataClientInformationMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Fenix client can send TestData MerkleHash to Fenix Testdata sync server with this service
	SendMerkleHash(ctx context.Context, in *MerkleHashMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Fenix client can send TestData MerkleTree to Fenix Testdata sync server with this service
	SendMerkleTree(ctx context.Context, in *MerkleTreeMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Fenix client can send TestDataHeaders to Fenix Testdata sync server with this service
	SendTestDataHeaders(ctx context.Context, in *TestDataHeaderMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Fenix client can send TestData rows to Fenix Testdata sync server with this service
	SendTestDataRows(ctx context.Context, in *MerkleTreeMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
}

type testInstructionBackendGrpcServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewTestInstructionBackendGrpcServicesClient(cc grpc.ClientConnInterface) TestInstructionBackendGrpcServicesClient {
	return &testInstructionBackendGrpcServicesClient{cc}
}

func (c *testInstructionBackendGrpcServicesClient) AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixTestDataSyncServerGrpcApi.TestInstructionBackendGrpcServices/AreYouAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testInstructionBackendGrpcServicesClient) RegisterTestDataClient(ctx context.Context, in *TestDataClientInformationMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixTestDataSyncServerGrpcApi.TestInstructionBackendGrpcServices/RegisterTestDataClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testInstructionBackendGrpcServicesClient) SendMerkleHash(ctx context.Context, in *MerkleHashMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixTestDataSyncServerGrpcApi.TestInstructionBackendGrpcServices/SendMerkleHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testInstructionBackendGrpcServicesClient) SendMerkleTree(ctx context.Context, in *MerkleTreeMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixTestDataSyncServerGrpcApi.TestInstructionBackendGrpcServices/SendMerkleTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testInstructionBackendGrpcServicesClient) SendTestDataHeaders(ctx context.Context, in *TestDataHeaderMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixTestDataSyncServerGrpcApi.TestInstructionBackendGrpcServices/SendTestDataHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testInstructionBackendGrpcServicesClient) SendTestDataRows(ctx context.Context, in *MerkleTreeMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixTestDataSyncServerGrpcApi.TestInstructionBackendGrpcServices/SendTestDataRows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestInstructionBackendGrpcServicesServer is the server API for TestInstructionBackendGrpcServices service.
// All implementations must embed UnimplementedTestInstructionBackendGrpcServicesServer
// for forward compatibility
type TestInstructionBackendGrpcServicesServer interface {
	//Fenix client can check if Fenix Testdata sync server is alive with this service
	AreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error)
	// Fenix client can register itself with the Fenix Testdata sync server
	RegisterTestDataClient(context.Context, *TestDataClientInformationMessage) (*AckNackResponse, error)
	// Fenix client can send TestData MerkleHash to Fenix Testdata sync server with this service
	SendMerkleHash(context.Context, *MerkleHashMessage) (*AckNackResponse, error)
	// Fenix client can send TestData MerkleTree to Fenix Testdata sync server with this service
	SendMerkleTree(context.Context, *MerkleTreeMessage) (*AckNackResponse, error)
	// Fenix client can send TestDataHeaders to Fenix Testdata sync server with this service
	SendTestDataHeaders(context.Context, *TestDataHeaderMessage) (*AckNackResponse, error)
	// Fenix client can send TestData rows to Fenix Testdata sync server with this service
	SendTestDataRows(context.Context, *MerkleTreeMessage) (*AckNackResponse, error)
	mustEmbedUnimplementedTestInstructionBackendGrpcServicesServer()
}

// UnimplementedTestInstructionBackendGrpcServicesServer must be embedded to have forward compatible implementations.
type UnimplementedTestInstructionBackendGrpcServicesServer struct {
}

func (UnimplementedTestInstructionBackendGrpcServicesServer) AreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreYouAlive not implemented")
}
func (UnimplementedTestInstructionBackendGrpcServicesServer) RegisterTestDataClient(context.Context, *TestDataClientInformationMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTestDataClient not implemented")
}
func (UnimplementedTestInstructionBackendGrpcServicesServer) SendMerkleHash(context.Context, *MerkleHashMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMerkleHash not implemented")
}
func (UnimplementedTestInstructionBackendGrpcServicesServer) SendMerkleTree(context.Context, *MerkleTreeMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMerkleTree not implemented")
}
func (UnimplementedTestInstructionBackendGrpcServicesServer) SendTestDataHeaders(context.Context, *TestDataHeaderMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTestDataHeaders not implemented")
}
func (UnimplementedTestInstructionBackendGrpcServicesServer) SendTestDataRows(context.Context, *MerkleTreeMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTestDataRows not implemented")
}
func (UnimplementedTestInstructionBackendGrpcServicesServer) mustEmbedUnimplementedTestInstructionBackendGrpcServicesServer() {
}

// UnsafeTestInstructionBackendGrpcServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestInstructionBackendGrpcServicesServer will
// result in compilation errors.
type UnsafeTestInstructionBackendGrpcServicesServer interface {
	mustEmbedUnimplementedTestInstructionBackendGrpcServicesServer()
}

func RegisterTestInstructionBackendGrpcServicesServer(s grpc.ServiceRegistrar, srv TestInstructionBackendGrpcServicesServer) {
	s.RegisterService(&TestInstructionBackendGrpcServices_ServiceDesc, srv)
}

func _TestInstructionBackendGrpcServices_AreYouAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestInstructionBackendGrpcServicesServer).AreYouAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixTestDataSyncServerGrpcApi.TestInstructionBackendGrpcServices/AreYouAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestInstructionBackendGrpcServicesServer).AreYouAlive(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestInstructionBackendGrpcServices_RegisterTestDataClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestDataClientInformationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestInstructionBackendGrpcServicesServer).RegisterTestDataClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixTestDataSyncServerGrpcApi.TestInstructionBackendGrpcServices/RegisterTestDataClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestInstructionBackendGrpcServicesServer).RegisterTestDataClient(ctx, req.(*TestDataClientInformationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestInstructionBackendGrpcServices_SendMerkleHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerkleHashMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestInstructionBackendGrpcServicesServer).SendMerkleHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixTestDataSyncServerGrpcApi.TestInstructionBackendGrpcServices/SendMerkleHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestInstructionBackendGrpcServicesServer).SendMerkleHash(ctx, req.(*MerkleHashMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestInstructionBackendGrpcServices_SendMerkleTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerkleTreeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestInstructionBackendGrpcServicesServer).SendMerkleTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixTestDataSyncServerGrpcApi.TestInstructionBackendGrpcServices/SendMerkleTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestInstructionBackendGrpcServicesServer).SendMerkleTree(ctx, req.(*MerkleTreeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestInstructionBackendGrpcServices_SendTestDataHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestDataHeaderMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestInstructionBackendGrpcServicesServer).SendTestDataHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixTestDataSyncServerGrpcApi.TestInstructionBackendGrpcServices/SendTestDataHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestInstructionBackendGrpcServicesServer).SendTestDataHeaders(ctx, req.(*TestDataHeaderMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestInstructionBackendGrpcServices_SendTestDataRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerkleTreeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestInstructionBackendGrpcServicesServer).SendTestDataRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixTestDataSyncServerGrpcApi.TestInstructionBackendGrpcServices/SendTestDataRows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestInstructionBackendGrpcServicesServer).SendTestDataRows(ctx, req.(*MerkleTreeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// TestInstructionBackendGrpcServices_ServiceDesc is the grpc.ServiceDesc for TestInstructionBackendGrpcServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestInstructionBackendGrpcServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fenixTestDataSyncServerGrpcApi.TestInstructionBackendGrpcServices",
	HandlerType: (*TestInstructionBackendGrpcServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AreYouAlive",
			Handler:    _TestInstructionBackendGrpcServices_AreYouAlive_Handler,
		},
		{
			MethodName: "RegisterTestDataClient",
			Handler:    _TestInstructionBackendGrpcServices_RegisterTestDataClient_Handler,
		},
		{
			MethodName: "SendMerkleHash",
			Handler:    _TestInstructionBackendGrpcServices_SendMerkleHash_Handler,
		},
		{
			MethodName: "SendMerkleTree",
			Handler:    _TestInstructionBackendGrpcServices_SendMerkleTree_Handler,
		},
		{
			MethodName: "SendTestDataHeaders",
			Handler:    _TestInstructionBackendGrpcServices_SendTestDataHeaders_Handler,
		},
		{
			MethodName: "SendTestDataRows",
			Handler:    _TestInstructionBackendGrpcServices_SendTestDataRows_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fenixTestDataSyncServerGrpcApi.proto",
}
